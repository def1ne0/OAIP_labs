#include <iostream>
#include <vector>
#include <limits>

#include "Task_1.h"
#include "Task_2.h"

#define SEP cout << "************************" << endl;
#define PRE_ESSENCE "–°—É—Ç—å –∑–∞–¥–∞–Ω–∏—è:\n "
#define COMPL_BY "\n –í—ã–ø–æ–ª–Ω–∏–ª: –§–∏–Ω–µ–≤–∏—á –ê—Ä—Å–µ–Ω–∏–π"

using namespace std;

int select_choice();

void menu();

int main () {
    menu();
}

int select_choice () {
    int choice;
    cin >> choice;
    SEP
    if (!cin.fail()) {
        return choice;
    } else {
        cin.clear();
        cin.ignore(numeric_limits<std::streamsize>::max(), '\n');
        return -1;
    }
}

void menu () {
    vector<string> essence = {
        "–ò—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª while –≤—ã—á–∏—Å–ª–∏—Ç—å —Å—É–º–º—É (–æ—Ç i = 1 –¥–æ i = 30) N(i) = (ai - bi)^2, –≥–¥–µ ai –∏ bi –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ",
        "–ò—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª do while –Ω–∞–π—Ç–∏ —Å—É–º–º—É —Ä—è–¥–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é ùúÄ = 10^(-3), di = 1/(2^n) + 1/(3^n)"
    };
    bool exit = false;
    while (!exit) {
        int selected_choice;
        cout << "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é (—á–∏—Å–ª–æ):\n -> 0. –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n -> 1. –ò—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª while, –≤—ã—á–∏—Å–ª–∏—Ç—å N (–ó–∞–¥–∞–Ω–∏–µ 1)\n -> 2. –ò—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª do while –Ω–∞–π—Ç–∏ —Å—É–º–º—É —Ä—è–¥–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é" << endl;
        selected_choice = select_choice();

        switch (selected_choice) {
        case -1:
            cout << "–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –ß–ò–°–õ–û, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é!!!" << endl;
            SEP
            break;

        case 0:
            exit = true;
            break;
        case 1:
            cout << PRE_ESSENCE << essence[0] << COMPL_BY << endl;
            do_Task_1();
            SEP
            break;
        case 2:
            cout << PRE_ESSENCE << essence[1] << COMPL_BY << endl;
            do_Task_2();
            SEP
            break;
        default:
            cout << "–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é" << endl;
            SEP
            break;
        }
    }
    return;
}